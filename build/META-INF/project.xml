<exportedData buildLabel="build_3.5_30434_OPT_2010.01.13_07:32:22" buildVersion="3.5.1.30434" version="39">
  <exportPath>/projects/EC-TOPdesk-0.0.2.32</exportPath>
  <project>
    <projectName>EC-TOPdesk-0.0.2.32</projectName>
    <propertySheet>
      <property>
        <expandable>0</expandable>
        <propertyName>ec_setup</propertyName>
        <value>use Cwd;&#xA;use File::Spec;&#xA;use POSIX;&#xA;use MIME::Base64;&#xA;use File::Temp qw(tempfile tempdir);&#xA;use Archive::Zip;&#xA;use Digest::MD5 qw(md5_hex);&#xA;&#xA;my $dir = getcwd;&#xA;my $logfile =&#34;&#34;;&#xA;my $pluginDir;&#xA;&#xA;&#xA;if ( defined $ENV{QUERY_STRING} ) {    # Promotion through UI&#xA;    $pluginDir = $ENV{COMMANDER_PLUGINS} . &#34;/$pluginName&#34;;&#xA;}&#xA;else {&#xA;    my $commanderPluginDir = $commander-&gt;getProperty(&#39;/server/settings/pluginsDirectory&#39;)-&gt;findvalue(&#39;//value&#39;);&#xA;    # We are not checking for the directory, because we can run this script on a different machine&#xA;    $pluginDir = &#34;$commanderPluginDir/$pluginName&#34;;&#xA;}&#xA;&#xA;$logfile .= &#34;Plugin directory is $pluginDir&#34;;&#xA;&#xA;$commander-&gt;setProperty(&#34;/plugins/$pluginName/project/pluginDir&#34;, {value=&gt;$pluginDir});&#xA;$logfile .= &#34;Plugin Name: $pluginName\n&#34;;&#xA;$logfile .= &#34;Current directory: $dir\n&#34;;&#xA;&#xA;# Evaluate promote.groovy or demote.groovy based on whether plugin is being promoted or demoted ($promoteAction)&#xA;local $/ = undef;&#xA;&#xA;&#xA;my $demoteDsl = q{&#xA;import groovy.transform.BaseScript&#xA;import com.electriccloud.commander.dsl.util.BasePlugin&#xA;&#xA;//noinspection GroovyUnusedAssignment&#xA;@BaseScript BasePlugin baseScript&#xA;&#xA;def pluginName = args.pluginName&#xA;def pluginKey = getProject(&#34;/plugins/$pluginName/project&#34;).pluginKey&#xA;def pluginDir = getProperty(&#34;/projects/$pluginName/pluginDir&#34;).value&#xA;&#xA;cleanup(pluginKey, pluginName)&#xA;&#xA;return &#34;Plugin $pluginKey demoted&#34;&#xA;&#xA;};&#xA;&#xA;my $promoteDsl = q{&#xA;import groovy.transform.BaseScript&#xA;import com.electriccloud.commander.dsl.util.BasePlugin&#xA;&#xA;//noinspection GroovyUnusedAssignment&#xA;@BaseScript BasePlugin baseScript&#xA;&#xA;// Variables available for use in DSL code&#xA;def pluginName = args.pluginName&#xA;def upgradeAction = args.upgradeAction&#xA;def otherPluginName = args.otherPluginName&#xA;&#xA;def pluginKey = getProject(&#34;/plugins/$pluginName/project&#34;).pluginKey&#xA;def pluginDir = getProperty(&#34;/projects/$pluginName/pluginDir&#34;).value&#xA;&#xA;//List of procedure steps to which the plugin configuration credentials need to be attached&#xA;// ** steps with attached credentials&#xA;def stepsWithAttachedCredentials = [&#xA;  [procedureName: &#39;createOperatorChange&#39;, stepName: &#39;createOperatorChange&#39;]&#xA;]&#xA;// ** end steps with attached credentials&#xA;&#xA;project pluginName, {&#xA;&#x9;loadPluginProperties(pluginDir, pluginName)&#xA;&#x9;loadProcedures(pluginDir, pluginKey, pluginName, stepsWithAttachedCredentials)&#xA;&#x9;//plugin configuration metadata&#xA;&#x9;property &#39;ec_config&#39;, {&#xA;&#x9;&#x9;configLocation = &#39;ec_plugin_cfgs&#39;&#xA;&#x9;&#x9;form = &#39;$[&#39; + &#34;/projects/${pluginName}/procedures/CreateConfiguration/ec_parameterForm]&#34;&#xA;&#x9;&#x9;property &#39;fields&#39;, {&#xA;&#x9;&#x9;&#x9;property &#39;desc&#39;, {&#xA;&#x9;&#x9;&#x9;&#x9;property &#39;label&#39;, value: &#39;Description&#39;&#xA;&#x9;&#x9;&#x9;&#x9;property &#39;order&#39;, value: &#39;1&#39;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;// Copy existing plugin configurations from the previous&#xA;// version to this version. At the same time, also attach&#xA;// the credentials to the required plugin procedure steps.&#xA;upgrade(upgradeAction, pluginName, otherPluginName, stepsWithAttachedCredentials)&#xA;&#xA;};&#xA;&#xA;&#xA;my $dsl;&#xA;if ($promoteAction eq &#39;promote&#39;) {&#xA;  $dsl = $promoteDsl;&#xA;}&#xA;else {&#xA;  $dsl = $demoteDsl;&#xA;}&#xA;&#xA;my $dslReponse = $commander-&gt;evalDsl(&#xA;    $dsl, {&#xA;        parameters =&gt; qq(&#xA;                     {&#xA;                       &#34;pluginName&#34;:&#34;$pluginName&#34;,&#xA;                       &#34;upgradeAction&#34;:&#34;$upgradeAction&#34;,&#xA;                       &#34;otherPluginName&#34;:&#34;$otherPluginName&#34;&#xA;                     }&#xA;              ),&#xA;        debug             =&gt; &#39;false&#39;,&#xA;        serverLibraryPath =&gt; &#34;$pluginDir/dsl&#34;&#xA;    },&#xA;);&#xA;&#xA;&#xA;$logfile .= $dslReponse-&gt;findnodes_as_string(&#34;/&#34;);&#xA;my $errorMessage = $commander-&gt;getError();&#xA;&#xA;if ( !$errorMessage ) {&#xA;    # This is here because we cannot do publishArtifactVersion in dsl today&#xA;    # delete artifact if it exists first&#xA;&#xA;    my $dependenciesProperty = &#39;/projects/EC-TOPdesk-0.0.2.32/ec_groovyDependencies&#39;;&#xA;    my $base64 = &#39;&#39;;&#xA;    my $xpath;&#xA;    eval {&#xA;      $xpath = $commander-&gt;getProperties({path =&gt; $dependenciesProperty});&#xA;      1;&#xA;    };&#xA;    unless($@) {&#xA;      my $blocks = {};&#xA;      my $checksum = &#39;&#39;;&#xA;      for my $prop ($xpath-&gt;findnodes(&#39;//property&#39;)) {&#xA;        my $name = $prop-&gt;findvalue(&#39;propertyName&#39;)-&gt;string_value;&#xA;        my $value = $prop-&gt;findvalue(&#39;value&#39;)-&gt;string_value;&#xA;        if ($name eq &#39;checksum&#39;) {&#xA;          $checksum = $value;&#xA;        }&#xA;        else {&#xA;          my ($number) = $name =~ /ec_dependencyChunk_(\d+)$/;&#xA;          $blocks-&gt;{$number} = $value;&#xA;        }&#xA;      }&#xA;      for my $key (sort {$a &lt;=&gt; $b} keys %$blocks) {&#xA;        $base64 .= $blocks-&gt;{$key};&#xA;      }&#xA;&#xA;      my $resultChecksum = md5_hex($base64);&#xA;      unless($checksum) {&#xA;        die &#34;No checksum found in dependendencies property, please reinstall the plugin&#34;;&#xA;      }&#xA;      if ($resultChecksum ne $checksum) {&#xA;        die &#34;Wrong dependency checksum: original checksum is $checksum&#34;;&#xA;      }&#xA;    }&#xA;&#xA;    if ($base64) {&#xA;      my $grapesVersion = &#39;1.0.0&#39;;&#xA;      my $cleanup = 1;&#xA;      my $groupId = &#39;com.electriccloud&#39;;&#xA;      $commander-&gt;deleteArtifactVersion($groupId . &#39;:EC-TOPdesk-Grapes:&#39; . $grapesVersion);&#xA;      my $binary = decode_base64($base64);&#xA;      my ($tempFh, $tempFilename) = tempfile(CLEANUP =&gt; $cleanup);&#xA;      binmode($tempFh);&#xA;      print $tempFh $binary;&#xA;      close $tempFh;&#xA;&#xA;      my ($tempDir) = tempdir(CLEANUP =&gt; $cleanup);&#xA;      my $zip = Archive::Zip-&gt;new();&#xA;      unless($zip-&gt;read($tempFilename) == Archive::Zip::AZ_OK()) {&#xA;        die &#34;Cannot read .zip dependencies: $!&#34;;&#xA;      }&#xA;      $zip-&gt;extractTree(&#34;&#34;, $tempDir . &#34;/&#34;);&#xA;&#xA;      if ( $promoteAction eq &#34;promote&#34; ) {&#xA;          #publish jars to the repo server if the plugin project was created successfully&#xA;          my $am = new ElectricCommander::ArtifactManagement($commander);&#xA;          my $artifactVersion = $am-&gt;publish(&#xA;              {   groupId         =&gt; $groupId,&#xA;                  artifactKey     =&gt; &#39;EC-TOPdesk-Grapes&#39;,&#xA;                  version         =&gt; $grapesVersion,&#xA;                  includePatterns =&gt; &#34;**&#34;,&#xA;                  fromDirectory   =&gt; File::Spec-&gt;catfile($tempDir, &#39;lib/grapes&#39;),&#xA;                  description =&gt; &#39;JARs that EC-TOPdesk plugin procedures depend on&#39;&#xA;              }&#xA;          );&#xA;&#xA;          # Print out the xml of the published artifactVersion.&#xA;          $logfile .= $artifactVersion-&gt;xml() . &#34;\n&#34;;&#xA;          if ( $artifactVersion-&gt;diagnostics() ) {&#xA;              $logfile .= &#34;\nDetails:\n&#34; . $artifactVersion-&gt;diagnostics();&#xA;          }&#xA;      }&#xA;    }&#xA;}&#xA;&#xA;&#xA;# Create output property for plugin setup debug logs&#xA;my $nowString = localtime;&#xA;$commander-&gt;setProperty( &#34;/plugins/$pluginName/project/logs/$nowString&#34;, { value =&gt; $logfile } );&#xA;&#xA;die $errorMessage unless !$errorMessage;&#xA;</value>
        <description></description>
      </property>
      <property>
        <expandable>0</expandable>
        <propertyName>ec_groovyDependencies</propertyName>
        <value></value>
        <description>Packed .jar dependencies</description>
        <propertySheet>
          <property>
            <expandable>0</expandable>
            <propertyName>ec_dependencyChunk_0</propertyName>
            <value></value>
            <description></description>
          </property>
          <property>
            <expandable>0</expandable>
            <propertyName>checksum</propertyName>
            <value>d41d8cd98f00b204e9800998ecf8427e</value>
            <description>MD5 checksum of ZIP archive</description>
          </property>
        </propertySheet>
      </property>
    </propertySheet>
  </project>
</exportedData>